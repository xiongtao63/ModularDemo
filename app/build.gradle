plugins {
    id 'com.android.application'
}

apply from: rootProject.file('flavors.gradle')
println("app module run ...")
println "app module run 2...."
println 'app module run 3'
println 666

def myname = rootProject.username
println "myname:" + myname
// 糖果语法 == js 弱类型   类型可以推到
myname = 999
println "myname:" + myname

// 使用方式二
println ">>>>>${rootProject.ext.username}"

// 优化
// 定义变量 使用变量
// def app_android=this.getRootProject().ext.app_android
android {
    signingConfigs {
        release {
        storeFile file('E:\\android.keystore')
            storePassword '123456'
            keyAlias 'android.keystore'
            keyPassword '123456'
        }
        debug {
        storeFile file('E:\\android.keystore')
            storePassword '123456'
            keyAlias 'android.keystore'
            keyPassword '123456'
        }
    }
    compileSdk app_android.compileSdk

    defaultConfig {
        applicationId "com.xiongtao.modulargradledemo"
        minSdk app_android.minSdk
        targetSdk app_android.targetSdk
        versionCode app_android.versionCode
        versionName app_android.versionName

        testInstrumentationRunner app_android.testInstrumentationRunner
    }

    buildTypes {
        release {
            buildConfigField("String","SERVER_URL","\"${url.debug}\"")
            buildConfigField("boolean","isShow","true")
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android-optimize.txt'), 'proguard-rules.pro'
            signingConfig signingConfigs.release
        }
        debug{
            buildConfigField("String","SERVER_URL","\"http://sdfsf\"")
            buildConfigField("int","versss","1")
            signingConfig signingConfigs.debug
        }
    }
    compileOptions {
        sourceCompatibility JavaVersion.VERSION_1_8
        targetCompatibility JavaVersion.VERSION_1_8
    }

    lintOptions {
        checkReleaseBuilds false
        // Or, if you prefer, you can continue to check for errors in release builds,
        // but continue the build even when errors are found:
        abortOnError false
    }

//    flavorDimensions "versionCode"
//    //多渠道打包测试
//    productFlavors {
//        xxx{
//            applicationId = "com.test.xxx"
//            buildConfigField "int","TEST_VALUE","1"
//            buildConfigField "String","TEST_NAME","\"xxx\""
//        }
//        bbb{
//            applicationId = "com.test.bbb"
//            buildConfigField "int","TEST_VALUE","2"
//            buildConfigField "String","TEST_NAME","\"bbb\""
//        }
//        ccc{
//            applicationId = "com.test.ccc"
//            buildConfigField "int","TEST_VALUE","3"
//            buildConfigField "String","TEST_NAME","\"ccc\""
//        }
//    }
//    productFlavors.all{flavor ->
//        ////遍历productFlavors多渠道，设置渠道号（xiaomi 、huawei）
//        flavor.manifestPlaceholders = [CHANNEL_VALUE:name]
//
//    }
//
//    applicationVariants.all{variant ->
//        variant.outputs.all { output ->
//            if (output.outputFile != null && output.outputFile.name.endsWith('.apk')) {
//                def filename = "${variant.flavorName}_v${variant.versionName}_"  + new Date().format("yyyy-MM-dd") + "_" + variant.buildType.name + ".apk"
//                outputFileName = filename
//            }
//        }
//    }

}

dependencies {

//    implementation 'androidx.appcompat:appcompat:1.2.0'
//    implementation 'com.google.android.material:material:1.3.0'
//    implementation 'androidx.constraintlayout:constraintlayout:2.0.4'
//    testImplementation 'junit:junit:4.+'
//    androidTestImplementation 'androidx.test.ext:junit:1.1.2'
//    androidTestImplementation 'androidx.test.espresso:espresso-core:3.3.0'

//    implementation app_impl.appcompat
//    implementation app_impl.material
//    implementation app_impl.constraintlayout
//    testImplementation app_impl.junit
//    androidTestImplementation app_impl["junit-ext"]
//    androidTestImplementation app_impl["espresso-core"]
    app_impl.each{
        k,v -> implementation v
    }
}