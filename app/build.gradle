apply plugin: 'com.android.application'

println("app module run ...")
println "app module run 2...."
println 'app module run 3'
println 666

// 使用 app_config ...

// rootProject Gradle 内置的

// 使用方式一 定义变量
def myname=rootProject.ext.usename
println "myname:" + myname

// 糖果语法 == js 弱类型   类型可以推到
myname=999
println "myname:" + myname

// 使用方式二
println ">>>>>${rootProject.ext.usename}"

// 优化
// 定义变量 使用变量
// def app_android=this.getRootProject().ext.app_android

android {
    compileSdkVersion app_android.compileSdkVersion
    buildToolsVersion app_android.buildToolsVersion
    defaultConfig {
        applicationId "com.xiangxue.modular_gradle"
        minSdkVersion app_android.minSdkVersion
        targetSdkVersion app_android.targetSdkVersion
        versionCode app_android.versionCode
        versionName app_android.versionName
        testInstrumentationRunner app_android.testInstrumentationRunner
    }
    buildTypes {
        debug {
            buildConfigField("String", "SERVER_URL", "\"${url.debug}\"")
        }
        release {
            buildConfigField("String", "SERVER_URL", "\"${url.release}\"")

            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android-optimize.txt'), 'proguard-rules.pro'
        }
    }
}

dependencies {
    implementation fileTree(dir: 'libs', include: ['*.jar'])

    /*implementation 'androidx.appcompat:appcompat:1.1.0'
                implementation 'androidx.constraintlayout:constraintlayout:1.1.3'
    testImplementation 'junit:junit:4.12'
    androidTestImplementation 'androidx.test:runner:1.2.0'
    androidTestImplementation 'androidx.test.espresso:espresso-core:3.2.0'*/

    /*implementation app_impl.appcompat
    testImplementation app_impl.junit
    androidTestImplementation  app_impl.runner
    androidTestImplementation  app_impl.espresso*/

    // 更简化的方式
    app_impl.each {
        k, v -> implementation v
    }
}
